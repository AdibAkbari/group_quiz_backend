
> test
> jest httpTests/

FAIL httpTests/player/playerQuestionData.test.ts
  ● Successful question information for player - first question

    TypeError: Cannot read properties of undefined (reading 'answers')

      110 |   const quiz = adminQuizInfo(token, quizId);
      111 |   const answerInfo: any[] = [];
    > 112 |   for (let answer of quiz.questions[0].answers) {
          |                                        ^
      113 |     answerInfo.push({
      114 |       answerId: answer.answerId,
      115 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:112:40)

  ● Successful question information for player - last question

    TypeError: Cannot read properties of undefined (reading 'answers')

      142 |   const quiz = adminQuizInfo(token, quizId);
      143 |   const answerInfo: any[] = [];
    > 144 |   for (let answer of quiz.questions[1].answers) {
          |                                        ^
      145 |     answerInfo.push({
      146 |       answerId: answer.answerId,
      147 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:144:40)

  ● Successful question information for player - question edit has no impact

    TypeError: Cannot read properties of undefined (reading 'answers')

      169 |   const res = playerQuestionData(playerId, 1);
      170 |   const answerInfo: any[] = [];
    > 171 |   for (let answer of quiz.questions[0].answers) {
          |                                        ^
      172 |     answerInfo.push({
      173 |       answerId: answer.answerId,
      174 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:171:40)

  ● Successful question information for player - different players get the same info

    TypeError: Cannot read properties of undefined (reading 'answers')

      196 |   const quiz = adminQuizInfo(token, quizId);
      197 |   const answerInfo: any[] = [];
    > 198 |   for (let answer of quiz.questions[0].answers) {
          |                                        ^
      199 |     answerInfo.push({
      200 |       answerId: answer.answerId,
      201 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:198:40)

FAIL httpTests/adminQuizSession/adminQuizSessionProgress.test.ts
  ● Test successful session progress, NEXT_QUESTION, first question

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "LOBBY"
    Received: undefined

      66 | iter3test('Test successful session progress, NEXT_QUESTION, first question', () => {
      67 |   // checks if in countdown state, before autoStart expires
    > 68 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("LOBBY");
         |                                                     ^
      69 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
      70 |   expect(res).toStrictEqual({});
      71 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:68:53)

  ● Test successful session progress, NEXT_QUESTION with 2 questions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      80 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      81 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 82 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");
         |                                                     ^
      83 |   expect(res).toStrictEqual({});
      84 | });
      85 |

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:82:53)

  ● Test successful session progress, QUESTION_OPEN state

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      87 |   // checks if in countdown state ended and in question open state
      88 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 89 |   expect(res).toStrictEqual({});
         |               ^
      90 |   while (getSessionState(token, quizId, sessionId) === 'QUESTION_COUNTDOWN') {
      91 |     continue;
      92 |   }

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:89:15)

  ● Test successful session progress, QUESTION_CLOSE state after timeout

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

       97 |   // checks if in question close state after duration ends
       98 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    >  99 |   expect(res).toStrictEqual({});
          |               ^
      100 |   while (getSessionState(token, quizId, sessionId) === 'QUESTION_COUNTDOWN') {
      101 |     continue;
      102 |   }

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:99:15)

  ● Test successful session progress, GO_TO_ANSWER

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      114 |   }
      115 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
    > 116 |   expect(res).toStrictEqual({});
          |               ^
      117 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      118 | });
      119 |

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:116:15)

  ● Test successful session progress, GO_TO_FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      124 |     continue;
      125 |   }
    > 126 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      127 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      128 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
      129 |   while (getSessionState(token, quizId, sessionId) === 'QUESTION_COUNTDOWN') {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:126:53)

  ● Test successful session progress, END

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      155 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      156 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "END");
    > 157 |   expect(res).toStrictEqual({});
          |               ^
      158 |   expect(getSessionState(token, quizId, sessionId)).toBe("END");
      159 | });
      160 |

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:157:15)

  ● Test unsuccessful session progress, cant go to next question while QUESTION_OPEN

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      170 |     continue;
      171 |   }
    > 172 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      173 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
      174 |   expect(res).toBe(400);
      175 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:172:53)

  ● Test unsuccessful session progress, cant go to next question while FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      180 |     continue;
      181 |   }
    > 182 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      183 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      184 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      185 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:182:53)

  ● Test unsuccessful session progress, cant go to next question while END

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      201 |     continue;
      202 |   }
    > 203 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      204 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      205 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      206 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:203:53)

  ● Test unsuccessful session progress, cant go to answer while LOBBY

    expect(received).toBe(expected) // Object.is equality

    Expected: "LOBBY"
    Received: undefined

      219 |
      220 | iter3test('Test unsuccessful session progress, cant go to answer while LOBBY', () => {
    > 221 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");
          |                                                     ^
      222 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      223 |   expect(res).toBe(400);
      224 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:221:53)

  ● Test unsuccessful session progress, cant go to answer while QUESTION_COUNTDOWN

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      226 | iter3test('Test unsuccessful session progress, cant go to answer while QUESTION_COUNTDOWN', () => {
      227 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 228 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_COUNTDOWN");
          |                                                     ^
      229 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      230 |   expect(res).toBe(400);
      231 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:228:53)

  ● Test unsuccessful session progress, cant go to answer while FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      236 |     continue;
      237 |   }
    > 238 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      239 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      240 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      241 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:238:53)

  ● Test unsuccessful session progress, cant go to answer while END

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      257 |     continue;
      258 |   }
    > 259 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      260 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      261 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      262 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:259:53)

  ● Test unsuccessful session progress, cant go to answer while ANSWER_SHOW

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      281 |     continue;
      282 |   }
    > 283 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      284 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      285 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      286 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:283:53)

  ● Test unsuccessful session progress, cant go to final results while LOBBY

    expect(received).toBe(expected) // Object.is equality

    Expected: "LOBBY"
    Received: undefined

      289 |
      290 | iter3test('Test unsuccessful session progress, cant go to final results while LOBBY', () => {
    > 291 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");
          |                                                     ^
      292 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      293 |   expect(res).toBe(400);
      294 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:291:53)

  ● Test unsuccessful session progress, cant go to final results while QUESTION_COUNTDOWN

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      296 | iter3test('Test unsuccessful session progress, cant go to final results while QUESTION_COUNTDOWN', () => {
      297 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 298 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_COUNTDOWN");
          |                                                     ^
      299 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      300 |   expect(res).toBe(400);
      301 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:298:53)

  ● Test unsuccessful session progress, cant go to final results while QUESTION_OPEN, one question left

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      306 |     continue;
      307 |   }
    > 308 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      309 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      310 |   expect(res).toBe(400);
      311 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:308:53)

  ● Test unsuccessful session progress, cant go to final results while QUESTION_OPEN, no questions left

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      316 |     continue;
      317 |   }
    > 318 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      319 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      320 |   expect(res).toBe(400);
      321 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:318:53)

  ● Test unsuccessful session progress, cant go to final results while END

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      337 |     continue;
      338 |   }
    > 339 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      340 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      341 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      342 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:339:53)

  ● Test unsuccessful session progress, cant go to final results while in FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      361 |     continue;
      362 |   }
    > 363 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      364 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      365 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      366 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:363:53)

FAIL httpTests/adminQuizSession/adminQuizSessionStatus.test.ts
  ● Test successful session status, before quiz in progress

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status, quiz in progress, question 2

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status, single quiz ended

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status, single quiz in final results

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with quiz name update during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with quiz description update during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with quiz thumbnail add during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with new session created during during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with question edit during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with question delete during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with question add during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test quizId invalid error, cannot progress session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test unauthorised quiz to progress session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test invalid token session, session to progress

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts
  ● Test successful question edit

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      346 | iter3test('Test successful question edit', () => {
      347 |   const res = adminQuizQuestionEdit(token, quizId, questionId, { question, duration, points, answers, thumbnailUrl });
    > 348 |   expect(res).toStrictEqual({});
          |               ^
      349 |   const quiz = adminQuizInfo(token, quizId);
      350 |   expect(quiz.questions.length).toEqual(1);
      351 |   expect(quiz.questions[0].questionId).toEqual(questionId);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:348:15)

  ● Test successful question edit - multiple correct

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      384 |     }
      385 |   ], thumbnailUrl });
    > 386 |   expect(res).toStrictEqual({});
          |               ^
      387 |   const quiz = adminQuizInfo(token, quizId);
      388 |   for (let answer of quiz.questions[0].answers) {
      389 |     expect(colours).toContain(answer.colour);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:386:15)

FAIL httpTests/player/playerQuestionResults.test.ts
  ● Successful particular question results for players - single player single answer correct

    TypeError: answers is not iterable

      86 |   }
      87 |   const answers = playerQuestionData(playerId, 1).answers;
    > 88 |   for (const answer of answers) {
         |                        ^
      89 |     if (answer.answer === "Prince Charles") {
      90 |       answerIds.push(answer.answerId);
      91 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:88:24)

  ● Successful particular question results for players - two players single answer correct

    TypeError: answers is not iterable

      116 |   }
      117 |   const answers = playerQuestionData(playerId, 1).answers;
    > 118 |   for (const answer of answers) {
          |                        ^
      119 |     if (answer.answer === "Prince Charles") {
      120 |       answerIds.push(answer.answerId);
      121 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:118:24)

  ● Successful particular question results for players - single player multiple answers correct

    TypeError: answers is not iterable

      148 |   }
      149 |   const answers = playerQuestionData(playerId, 1).answers;
    > 150 |   for (const answer of answers) {
          |                        ^
      151 |     if (answer.answer === "Prince Charles") {
      152 |       answerIds.push(answer.answerId);
      153 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:150:24)

  ● Successful particular question results for players - two players multiple answers correct

    TypeError: answers is not iterable

      198 |   }
      199 |   const answers = playerQuestionData(playerId, 1).answers;
    > 200 |   for (const answer of answers) {
          |                        ^
      201 |     if (answer.answer === "Prince Charles") {
      202 |       answerIds.push(answer.answerId);
      203 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:200:24)

  ● Unsuccessful particular question results for players - playerId does not exist

    TypeError: answers is not iterable

      251 |   }
      252 |   const answers = playerQuestionData(playerId, 1).answers;
    > 253 |   for (const answer of answers) {
          |                        ^
      254 |     if (answer.answer === "Prince Charles") {
      255 |       answerIds.push(answer.answerId);
      256 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:253:24)

  ● Unsuccessful particular question results for players - questionId does not exist

    TypeError: answers is not iterable

      269 |   }
      270 |   const answers = playerQuestionData(playerId, 1).answers;
    > 271 |   for (const answer of answers) {
          |                        ^
      272 |     if (answer.answer === "Prince Charles") {
      273 |       answerIds.push(answer.answerId);
      274 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:271:24)

  ● Unsuccessful particular question results for players - session not up to question yet

    TypeError: answers is not iterable

      287 |   }
      288 |   const answers = playerQuestionData(playerId, 1).answers;
    > 289 |   for (const answer of answers) {
          |                        ^
      290 |     if (answer.answer === "Prince Charles") {
      291 |       answerIds.push(answer.answerId);
      292 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:289:24)

FAIL httpTests/player/playerQuestionAnswer.test.ts
  ● Test successful question answer for single player

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      55 |     continue;
      56 |   }
    > 57 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
         |                                                     ^
      58 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      59 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      60 |   playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:57:53)

  ● Test successful re-submission of question answer for single player

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      66 |     continue;
      67 |   }
    > 68 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
         |                                                     ^
      69 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      70 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      71 |   playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:68:53)

  ● Test successful question answer for two players

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      84 |     continue;
      85 |   }
    > 86 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
         |                                                     ^
      87 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      88 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      89 |   playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:86:53)

  ● Test unsuccessful question answer - playerId does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

       96 |     continue;
       97 |   }
    >  98 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
          |                                                     ^
       99 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      100 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      101 |   const res = playerQuestionAnswer(playerId+1, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:98:53)

  ● Test unsuccessful question answer - questionId not valid for session player is in

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      108 |     continue;
      109 |   }
    > 110 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
          |                                                     ^
      111 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      112 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      113 |   const res = playerQuestionAnswer(playerId, 1+1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:110:53)

  ● Test unsuccessful question answer - session in END state

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      126 |     continue;
      127 |   }
    > 128 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
          |                                                     ^
      129 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_ANSWER');
      130 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      131 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:128:53)

  ● Test unsuccessful question answer - session in QUESTION_COUNTDOWN state

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      141 | iter3test('Test unsuccessful question answer - session in QUESTION_COUNTDOWN state', () => {
      142 |   adminQuizSessionProgress(token, quizId, sessionId, 'NEXT_QUESTION');
    > 143 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_COUNTDOWN');
          |                                                     ^
      144 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      145 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      146 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:143:53)

  ● Test unsuccessful question answer - session in QUESTION_CLOSE state

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_CLOSE"
    Received: undefined

      156 |     continue;
      157 |   }
    > 158 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_CLOSE');
          |                                                     ^
      159 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      160 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      161 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:158:53)

  ● Test unsuccessful question answer - session in ANSWER_SHOW state

    expect(received).toBe(expected) // Object.is equality

    Expected: "ANSWER_SHOW"
    Received: undefined

      169 |   }
      170 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_ANSWER');
    > 171 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
          |                                                     ^
      172 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      173 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      174 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:171:53)

  ● Test unsuccessful question answer - session in FINAL_RESULTS state

    expect(received).toBe(expected) // Object.is equality

    Expected: "FINAL_RESULTS"
    Received: undefined

      183 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_ANSWER');
      184 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
    > 185 |   expect(getSessionState(token, quizId, sessionId)).toBe('FINAL_RESULTS');
          |                                                     ^
      186 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      187 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      188 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:185:53)

FAIL httpTests/adminQuizSession/adminQuizSessionResults.test.ts
  ● Successful final results for whole session - admin with one player

    TypeError: Cannot read properties of undefined (reading 'answers')

      80 |     continue;
      81 |   }
    > 82 |   const getAnswers = adminQuizInfo(token, quizId).questions[0].answers;
         |                                                               ^
      83 |   const answers = getAnswers.filter((a) => a.answer === "Prince Charles");
      84 |   const answerIds = answers.map((a) => a.answerId);
      85 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual('QUESTION_OPEN')

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:82:63)

  ● Successful final results for whole session - admin with 2 players

    TypeError: Cannot read properties of undefined (reading 'answers')

      152 |     continue;
      153 |   }
    > 154 |   const getAnswers = adminQuizInfo(token, quizId).questions[0].answers;
          |                                                               ^
      155 |   const answers = getAnswers.filter((a) => a.answer === "Prince Charles");
      156 |   const answerIds = answers.map((a) => a.answerId);
      157 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual('QUESTION_OPEN')

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:154:63)

FAIL httpTests/adminQuizSession/adminQuizSessionStart.test.ts
  ● Test successful session start, quiz with questions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      51 | iter3test('Test successful session start, quiz with questions', () => {
      52 |   const sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 53 |   expect(sessionId).toStrictEqual(expect.any(Number));
         |                     ^
      54 |   const status = adminQuizSessionStatus(token, quizId, sessionId);
      55 |   expect(status.state).toBe("LOBBY");
      56 |   expect(status.metadata.questions[0].questionId).toBe(questionId1);

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:53:21)

  ● Test successful session start, same quiz twice, different sessions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      61 |   const sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
      62 |   const sessionId2 = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 63 |   expect(sessionId).toStrictEqual(expect.any(Number));
         |                     ^
      64 |   expect(sessionId2).toStrictEqual(expect.any(Number));
      65 |   expect(sessionId).not.toBe(sessionId2);
      66 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:63:21)

  ● Test successful session start, two different quizzes, different sessions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      71 |   const sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
      72 |   const sessionId2 = adminQuizSessionStart(token, quizId2, autoStartNum).sessionId;
    > 73 |   expect(sessionId).toStrictEqual(expect.any(Number));
         |                     ^
      74 |   expect(sessionId2).toStrictEqual(expect.any(Number));
      75 |   expect(sessionId).not.toBe(sessionId2);
      76 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:73:21)

  ● Test quizId invalid error, cannot start session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "Second quiz description", "duration": 0, "name": "Second quiz", "numQuestions": 0, "questions": [], "quizId": 2, "timeCreated": 1691821206, "timeLastEdited": 1691821206}

      80 | iter3test('Test quizId invalid error, cannot start session', () => {
      81 |   const quiz = adminQuizInfo(token, quizId+1);
    > 82 |   expect(quiz).toStrictEqual(400);
         |                ^
      83 | });
      84 |
      85 | iter3test('Test unauthorised quiz to start session', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:82:16)

  ● Test successful session progress to question after autostart time ends

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      100 |   playerJoin(sessionId, 'Yuchao');
      101 |   playerJoin(sessionId, 'Giuliana');
    > 102 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");
          |                                                     ^
      103 | });
      104 |
      105 | /* iter3test('Test invalid token structure, quiz to read', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:102:53)

FAIL httpTests/adminQuiz/adminQuizQuestionMove.test.ts
  ● Successful quiz question move

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      72 |   adminQuizQuestionDuplicate(token, quizId, questionId);
      73 |   const res = adminQuizQuestionMove(token, quizId, questionId, newPosition);
    > 74 |   expect(res).toStrictEqual({});
         |               ^
      75 |   const quizInfo = adminQuizInfo(token, quizId);
      76 |   expect(quizInfo.questions[newPosition].questionId).toEqual(questionId);
      77 |   expect(quizInfo.questions[newPosition].question).toEqual(question.question);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:74:15)

FAIL httpTests/player/playerStatus.test.ts
  ● Successful status - LOBBY

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - QUESTION_COUNTDOWN

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - QUESTION_OPEN

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - QUESTION_CLOSE

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - ANSWER_SHOW

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - FINAL_RESULTS

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - END

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Unsuccessful player status - playerId does not exist

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

FAIL httpTests/player/playerResults.test.ts
  ● Successful final results for whole session - player 1

    TypeError: answers is not iterable

      83 |   }
      84 |   const answers = playerQuestionData(playerId, 1).answers;
    > 85 |   for (const answer of answers) {
         |                        ^
      86 |     if (answer.answer === "Prince Charles") {
      87 |       answerIds.push(answer.answerId);
      88 |     }

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:85:24)

  ● Successful final results for whole session - player 2

    TypeError: answers is not iterable

      161 |   }
      162 |   const answers = playerQuestionData(playerId, 1).answers;
    > 163 |   for (const answer of answers) {
          |                        ^
      164 |     if (answer.answer === "Prince Charles") {
      165 |       answerIds.push(answer.answerId);
      166 |     }

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:163:24)

FAIL httpTests/player/playerPostChat.test.ts
  ● Successful for one message, same player - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      57 |   // TODO get unix timestamp
      58 |   const timestamp = Math.round(Date.now() / 1000);
    > 59 |   expect(res).toStrictEqual({});
         |               ^
      60 |   const message = playerGetChat(playerId);
      61 |   expect(message.messages[0]).toStrictEqual({
      62 |     messageBody,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:59:15)

  ● Successful for multiple messages, same player, same body - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      72 |   const msg2 = playerPostChat(playerId, messageBody);
      73 |   const timestamp = Math.round(Date.now() / 1000);
    > 74 |   expect(msg1).toStrictEqual({});
         |                ^
      75 |   expect(msg2).toStrictEqual({});
      76 |   const message = playerGetChat(playerId);
      77 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:74:16)

  ● Successful for multiple messages, different players - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

       96 |   const msg2 = playerPostChat(playerId2, messageBody);
       97 |   const timestamp = Math.round(Date.now() / 1000);
    >  98 |   expect(msg1).toStrictEqual({});
          |                ^
       99 |   expect(msg2).toStrictEqual({});
      100 |   const message = playerGetChat(playerId);
      101 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:98:16)

  ● Invalid messageBody after a valid one - chat post

    TypeError: Cannot read properties of undefined (reading 'length')

      135 |   expect(res).toBe(400);
      136 |   const message = playerGetChat(playerId);
    > 137 |   expect(message.messages.length).toBe(1);
          |                           ^
      138 |   expect(message.messages[0]).toStrictEqual({
      139 |     messageBody,
      140 |     playerId,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:137:27)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - all details are correctly stored and retrieved by quiz info

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      291 | iter3test('Test successful question add - all details are correctly stored and retrieved by quiz info', () => {
      292 |   const questionId = adminQuizQuestionAdd(token, quizId, { question, duration, points, answers, thumbnailUrl } ).questionId;
    > 293 |   expect(questionId).toStrictEqual(expect.any(Number));
          |                      ^
      294 |   const quiz = adminQuizInfo(token, quizId);
      295 |   expect(quiz.questions.length).toEqual(1);
      296 |   expect(quiz.questions[0].questionId).toEqual(questionId);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:293:22)

  ● Test successful question add - multiple correct

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      329 |     }
      330 |   ], thumbnailUrl} ).questionId;
    > 331 |   expect(questionId).toStrictEqual(expect.any(Number));
          |                      ^
      332 |   const quiz = adminQuizInfo(token, quizId);
      333 |   for (let answer of quiz.questions[0].answers) {
      334 |     expect(colours).toContain(answer.colour);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:331:22)

  ● Test unsuccessful question add - question duration too long with another questin

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      442 |   adminQuizQuestionAdd(token, quizId, { question, duration: 100, points, answers, thumbnailUrl } );
      443 |   const res = adminQuizQuestionAdd(token, quizId, { question, duration: 81, points, answers } );
    > 444 |   expect(res).toStrictEqual(400);
          |               ^
      445 | });
      446 |
      447 | iter3test('Test unsuccessful question add - question answer less than 1', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:444:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
  ● Successful quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      68 | test('Successful quiz question delete', () => {
      69 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 70 |   expect(res).toStrictEqual({});
         |               ^
      71 |   const questions = adminQuizInfo(token, quizId).questions;
      72 |   expect(questions).not.toContain(question)
      73 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:70:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"newQuestionId": Any<Number>}
    Received: 400

      70 | test('Successful quiz question duplicate', () => {
      71 |   const res = adminQuizQuestionDuplicate(token, quizId, questionId);
    > 72 |   expect(res).toStrictEqual({ newQuestionId: expect.any(Number)} );
         |               ^
      73 |   const quiz = adminQuizInfo(token, quizId);
      74 |   expect(quiz.questions.length).toEqual(2);
      75 |   expect(quiz.questions[1].questionId).not.toEqual(questionId);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:72:15)

FAIL httpTests/player/playerJoin.test.ts
  ● Successful player join

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

  ● Successful second player join

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

  ● Unsuccessful player join - session not in LOBBY state

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

  ● Unsuccessful second player join - name is not unique

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

FAIL httpTests/player/playerGetChat.test.ts
  ● Successful get chat - conversation fetched by player 2

    TypeError: Cannot read properties of undefined (reading '0')

      61 |   const timestamp = Math.round(Date.now() / 1000);
      62 |   const message = playerGetChat(playerId2);
    > 63 |   expect(message.messages[0]).toStrictEqual({
         |                          ^
      64 |     messageBody,
      65 |     playerId: playerId1,
      66 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:63:26)

  ● Messages from other sessions player isnt in arent returned - chat get for playerId1

    TypeError: Cannot read properties of undefined (reading '0')

      83 |   const timestamp = Math.round(Date.now() / 1000);
      84 |   const message = playerGetChat(playerId1);
    > 85 |   expect(message.messages[0]).toStrictEqual({
         |                          ^
      86 |     messageBody,
      87 |     playerId: playerId1,
      88 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:85:26)

PASS httpTests/adminQuiz/adminQuizTrashEmpty.test.ts
PASS httpTests/adminUser/adminUserDetailsPut.test.ts
PASS httpTests/adminQuiz/adminQuizNameUpdate.test.ts
PASS httpTests/adminAuth/adminAuthRegister.test.ts
PASS httpTests/adminQuiz/adminQuizTransfer.test.ts
PASS httpTests/adminQuiz/adminQuizRestore.test.ts
PASS httpTests/adminQuiz/adminQuizTrash.test.ts
PASS httpTests/adminQuiz/adminQuizList.test.ts
PASS httpTests/adminQuiz/adminQuizDelete.test.ts
PASS httpTests/adminUser/adminUserPassword.test.ts
PASS httpTests/adminAuth/adminAuthLogin.test.ts
PASS httpTests/adminQuiz/adminQuizThumbnail.test.ts
PASS httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts
PASS httpTests/adminQuiz/adminQuizNew.test.ts
FAIL httpTests/adminAuth/adminAuthLogout.test.ts
  ● token is for a user who has already logged out

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      30 |   adminAuthLogout(token);
      31 |   const res = adminAuthLogout(token);
    > 32 |   expect(res).toStrictEqual(400);
         |               ^
      33 | });
      34 |
      35 | test('Cant perform action after logout', () => {

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogout.test.ts:32:15)

PASS httpTests/adminQuiz/adminQuizInfo.test.ts
PASS httpTests/adminUser/adminUserDetails.test.ts
PASS httpTests/other/clear.test.ts

Summary of all failing tests
FAIL httpTests/player/playerQuestionData.test.ts
  ● Successful question information for player - first question

    TypeError: Cannot read properties of undefined (reading 'answers')

      110 |   const quiz = adminQuizInfo(token, quizId);
      111 |   const answerInfo: any[] = [];
    > 112 |   for (let answer of quiz.questions[0].answers) {
          |                                        ^
      113 |     answerInfo.push({
      114 |       answerId: answer.answerId,
      115 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:112:40)

  ● Successful question information for player - last question

    TypeError: Cannot read properties of undefined (reading 'answers')

      142 |   const quiz = adminQuizInfo(token, quizId);
      143 |   const answerInfo: any[] = [];
    > 144 |   for (let answer of quiz.questions[1].answers) {
          |                                        ^
      145 |     answerInfo.push({
      146 |       answerId: answer.answerId,
      147 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:144:40)

  ● Successful question information for player - question edit has no impact

    TypeError: Cannot read properties of undefined (reading 'answers')

      169 |   const res = playerQuestionData(playerId, 1);
      170 |   const answerInfo: any[] = [];
    > 171 |   for (let answer of quiz.questions[0].answers) {
          |                                        ^
      172 |     answerInfo.push({
      173 |       answerId: answer.answerId,
      174 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:171:40)

  ● Successful question information for player - different players get the same info

    TypeError: Cannot read properties of undefined (reading 'answers')

      196 |   const quiz = adminQuizInfo(token, quizId);
      197 |   const answerInfo: any[] = [];
    > 198 |   for (let answer of quiz.questions[0].answers) {
          |                                        ^
      199 |     answerInfo.push({
      200 |       answerId: answer.answerId,
      201 |       answer: answer.answer,

      at Object.<anonymous> (httpTests/player/playerQuestionData.test.ts:198:40)

FAIL httpTests/adminQuizSession/adminQuizSessionProgress.test.ts
  ● Test successful session progress, NEXT_QUESTION, first question

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "LOBBY"
    Received: undefined

      66 | iter3test('Test successful session progress, NEXT_QUESTION, first question', () => {
      67 |   // checks if in countdown state, before autoStart expires
    > 68 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("LOBBY");
         |                                                     ^
      69 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
      70 |   expect(res).toStrictEqual({});
      71 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:68:53)

  ● Test successful session progress, NEXT_QUESTION with 2 questions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      80 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      81 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 82 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");
         |                                                     ^
      83 |   expect(res).toStrictEqual({});
      84 | });
      85 |

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:82:53)

  ● Test successful session progress, QUESTION_OPEN state

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      87 |   // checks if in countdown state ended and in question open state
      88 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 89 |   expect(res).toStrictEqual({});
         |               ^
      90 |   while (getSessionState(token, quizId, sessionId) === 'QUESTION_COUNTDOWN') {
      91 |     continue;
      92 |   }

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:89:15)

  ● Test successful session progress, QUESTION_CLOSE state after timeout

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

       97 |   // checks if in question close state after duration ends
       98 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    >  99 |   expect(res).toStrictEqual({});
          |               ^
      100 |   while (getSessionState(token, quizId, sessionId) === 'QUESTION_COUNTDOWN') {
      101 |     continue;
      102 |   }

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:99:15)

  ● Test successful session progress, GO_TO_ANSWER

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      114 |   }
      115 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
    > 116 |   expect(res).toStrictEqual({});
          |               ^
      117 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      118 | });
      119 |

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:116:15)

  ● Test successful session progress, GO_TO_FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      124 |     continue;
      125 |   }
    > 126 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      127 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      128 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
      129 |   while (getSessionState(token, quizId, sessionId) === 'QUESTION_COUNTDOWN') {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:126:53)

  ● Test successful session progress, END

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      155 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      156 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "END");
    > 157 |   expect(res).toStrictEqual({});
          |               ^
      158 |   expect(getSessionState(token, quizId, sessionId)).toBe("END");
      159 | });
      160 |

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:157:15)

  ● Test unsuccessful session progress, cant go to next question while QUESTION_OPEN

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      170 |     continue;
      171 |   }
    > 172 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      173 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
      174 |   expect(res).toBe(400);
      175 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:172:53)

  ● Test unsuccessful session progress, cant go to next question while FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      180 |     continue;
      181 |   }
    > 182 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      183 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      184 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      185 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:182:53)

  ● Test unsuccessful session progress, cant go to next question while END

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      201 |     continue;
      202 |   }
    > 203 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      204 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      205 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      206 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:203:53)

  ● Test unsuccessful session progress, cant go to answer while LOBBY

    expect(received).toBe(expected) // Object.is equality

    Expected: "LOBBY"
    Received: undefined

      219 |
      220 | iter3test('Test unsuccessful session progress, cant go to answer while LOBBY', () => {
    > 221 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");
          |                                                     ^
      222 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      223 |   expect(res).toBe(400);
      224 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:221:53)

  ● Test unsuccessful session progress, cant go to answer while QUESTION_COUNTDOWN

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      226 | iter3test('Test unsuccessful session progress, cant go to answer while QUESTION_COUNTDOWN', () => {
      227 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 228 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_COUNTDOWN");
          |                                                     ^
      229 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      230 |   expect(res).toBe(400);
      231 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:228:53)

  ● Test unsuccessful session progress, cant go to answer while FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      236 |     continue;
      237 |   }
    > 238 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      239 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      240 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      241 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:238:53)

  ● Test unsuccessful session progress, cant go to answer while END

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      257 |     continue;
      258 |   }
    > 259 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      260 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      261 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      262 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:259:53)

  ● Test unsuccessful session progress, cant go to answer while ANSWER_SHOW

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      281 |     continue;
      282 |   }
    > 283 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      284 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      285 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      286 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:283:53)

  ● Test unsuccessful session progress, cant go to final results while LOBBY

    expect(received).toBe(expected) // Object.is equality

    Expected: "LOBBY"
    Received: undefined

      289 |
      290 | iter3test('Test unsuccessful session progress, cant go to final results while LOBBY', () => {
    > 291 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");
          |                                                     ^
      292 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      293 |   expect(res).toBe(400);
      294 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:291:53)

  ● Test unsuccessful session progress, cant go to final results while QUESTION_COUNTDOWN

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      296 | iter3test('Test unsuccessful session progress, cant go to final results while QUESTION_COUNTDOWN', () => {
      297 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");
    > 298 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_COUNTDOWN");
          |                                                     ^
      299 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      300 |   expect(res).toBe(400);
      301 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:298:53)

  ● Test unsuccessful session progress, cant go to final results while QUESTION_OPEN, one question left

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      306 |     continue;
      307 |   }
    > 308 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      309 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      310 |   expect(res).toBe(400);
      311 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:308:53)

  ● Test unsuccessful session progress, cant go to final results while QUESTION_OPEN, no questions left

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      316 |     continue;
      317 |   }
    > 318 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      319 |   const res = adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_FINAL_RESULTS");
      320 |   expect(res).toBe(400);
      321 | });

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:318:53)

  ● Test unsuccessful session progress, cant go to final results while END

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      337 |     continue;
      338 |   }
    > 339 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      340 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      341 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      342 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:339:53)

  ● Test unsuccessful session progress, cant go to final results while in FINAL_RESULTS

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      361 |     continue;
      362 |   }
    > 363 |   expect(getSessionState(token, quizId, sessionId)).toBe("QUESTION_OPEN");
          |                                                     ^
      364 |   adminQuizSessionProgress(token, quizId, sessionId, "GO_TO_ANSWER");
      365 |   expect(getSessionState(token, quizId, sessionId)).toBe("ANSWER_SHOW");
      366 |   adminQuizSessionProgress(token, quizId, sessionId, "NEXT_QUESTION");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionProgress.test.ts:363:53)

FAIL httpTests/adminQuizSession/adminQuizSessionStatus.test.ts
  ● Test successful session status, before quiz in progress

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status, quiz in progress, question 2

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status, single quiz ended

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status, single quiz in final results

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with quiz name update during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with quiz description update during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with quiz thumbnail add during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with new session created during during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with question edit during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with question delete during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test successful session status with question add during doesnt affect session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test quizId invalid error, cannot progress session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test unauthorised quiz to progress session

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

  ● Test invalid token session, session to progress

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      94 |   questionId2 = adminQuizQuestionAdd(token, quizId, question2).questionId;
      95 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 96 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      97 | });
      98 |
      99 | // for each one check that the details haven't been changed and that timeEdited hasn't changed

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStatus.test.ts:96:71)

FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts
  ● Test successful question edit

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      346 | iter3test('Test successful question edit', () => {
      347 |   const res = adminQuizQuestionEdit(token, quizId, questionId, { question, duration, points, answers, thumbnailUrl });
    > 348 |   expect(res).toStrictEqual({});
          |               ^
      349 |   const quiz = adminQuizInfo(token, quizId);
      350 |   expect(quiz.questions.length).toEqual(1);
      351 |   expect(quiz.questions[0].questionId).toEqual(questionId);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:348:15)

  ● Test successful question edit - multiple correct

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      384 |     }
      385 |   ], thumbnailUrl });
    > 386 |   expect(res).toStrictEqual({});
          |               ^
      387 |   const quiz = adminQuizInfo(token, quizId);
      388 |   for (let answer of quiz.questions[0].answers) {
      389 |     expect(colours).toContain(answer.colour);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:386:15)

FAIL httpTests/player/playerQuestionResults.test.ts
  ● Successful particular question results for players - single player single answer correct

    TypeError: answers is not iterable

      86 |   }
      87 |   const answers = playerQuestionData(playerId, 1).answers;
    > 88 |   for (const answer of answers) {
         |                        ^
      89 |     if (answer.answer === "Prince Charles") {
      90 |       answerIds.push(answer.answerId);
      91 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:88:24)

  ● Successful particular question results for players - two players single answer correct

    TypeError: answers is not iterable

      116 |   }
      117 |   const answers = playerQuestionData(playerId, 1).answers;
    > 118 |   for (const answer of answers) {
          |                        ^
      119 |     if (answer.answer === "Prince Charles") {
      120 |       answerIds.push(answer.answerId);
      121 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:118:24)

  ● Successful particular question results for players - single player multiple answers correct

    TypeError: answers is not iterable

      148 |   }
      149 |   const answers = playerQuestionData(playerId, 1).answers;
    > 150 |   for (const answer of answers) {
          |                        ^
      151 |     if (answer.answer === "Prince Charles") {
      152 |       answerIds.push(answer.answerId);
      153 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:150:24)

  ● Successful particular question results for players - two players multiple answers correct

    TypeError: answers is not iterable

      198 |   }
      199 |   const answers = playerQuestionData(playerId, 1).answers;
    > 200 |   for (const answer of answers) {
          |                        ^
      201 |     if (answer.answer === "Prince Charles") {
      202 |       answerIds.push(answer.answerId);
      203 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:200:24)

  ● Unsuccessful particular question results for players - playerId does not exist

    TypeError: answers is not iterable

      251 |   }
      252 |   const answers = playerQuestionData(playerId, 1).answers;
    > 253 |   for (const answer of answers) {
          |                        ^
      254 |     if (answer.answer === "Prince Charles") {
      255 |       answerIds.push(answer.answerId);
      256 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:253:24)

  ● Unsuccessful particular question results for players - questionId does not exist

    TypeError: answers is not iterable

      269 |   }
      270 |   const answers = playerQuestionData(playerId, 1).answers;
    > 271 |   for (const answer of answers) {
          |                        ^
      272 |     if (answer.answer === "Prince Charles") {
      273 |       answerIds.push(answer.answerId);
      274 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:271:24)

  ● Unsuccessful particular question results for players - session not up to question yet

    TypeError: answers is not iterable

      287 |   }
      288 |   const answers = playerQuestionData(playerId, 1).answers;
    > 289 |   for (const answer of answers) {
          |                        ^
      290 |     if (answer.answer === "Prince Charles") {
      291 |       answerIds.push(answer.answerId);
      292 |     }

      at Object.<anonymous> (httpTests/player/playerQuestionResults.test.ts:289:24)

FAIL httpTests/player/playerQuestionAnswer.test.ts
  ● Test successful question answer for single player

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      55 |     continue;
      56 |   }
    > 57 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
         |                                                     ^
      58 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      59 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      60 |   playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:57:53)

  ● Test successful re-submission of question answer for single player

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      66 |     continue;
      67 |   }
    > 68 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
         |                                                     ^
      69 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      70 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      71 |   playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:68:53)

  ● Test successful question answer for two players

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      84 |     continue;
      85 |   }
    > 86 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
         |                                                     ^
      87 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      88 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      89 |   playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:86:53)

  ● Test unsuccessful question answer - playerId does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

       96 |     continue;
       97 |   }
    >  98 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
          |                                                     ^
       99 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      100 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      101 |   const res = playerQuestionAnswer(playerId+1, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:98:53)

  ● Test unsuccessful question answer - questionId not valid for session player is in

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      108 |     continue;
      109 |   }
    > 110 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
          |                                                     ^
      111 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      112 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      113 |   const res = playerQuestionAnswer(playerId, 1+1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:110:53)

  ● Test unsuccessful question answer - session in END state

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_OPEN"
    Received: undefined

      126 |     continue;
      127 |   }
    > 128 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_OPEN');
          |                                                     ^
      129 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_ANSWER');
      130 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
      131 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:128:53)

  ● Test unsuccessful question answer - session in QUESTION_COUNTDOWN state

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      141 | iter3test('Test unsuccessful question answer - session in QUESTION_COUNTDOWN state', () => {
      142 |   adminQuizSessionProgress(token, quizId, sessionId, 'NEXT_QUESTION');
    > 143 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_COUNTDOWN');
          |                                                     ^
      144 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      145 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      146 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:143:53)

  ● Test unsuccessful question answer - session in QUESTION_CLOSE state

    expect(received).toBe(expected) // Object.is equality

    Expected: "QUESTION_CLOSE"
    Received: undefined

      156 |     continue;
      157 |   }
    > 158 |   expect(getSessionState(token, quizId, sessionId)).toBe('QUESTION_CLOSE');
          |                                                     ^
      159 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      160 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      161 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:158:53)

  ● Test unsuccessful question answer - session in ANSWER_SHOW state

    expect(received).toBe(expected) // Object.is equality

    Expected: "ANSWER_SHOW"
    Received: undefined

      169 |   }
      170 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_ANSWER');
    > 171 |   expect(getSessionState(token, quizId, sessionId)).toBe('ANSWER_SHOW');
          |                                                     ^
      172 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      173 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      174 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:171:53)

  ● Test unsuccessful question answer - session in FINAL_RESULTS state

    expect(received).toBe(expected) // Object.is equality

    Expected: "FINAL_RESULTS"
    Received: undefined

      183 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_ANSWER');
      184 |   adminQuizSessionProgress(token, quizId, sessionId, 'GO_TO_FINAL_RESULTS');
    > 185 |   expect(getSessionState(token, quizId, sessionId)).toBe('FINAL_RESULTS');
          |                                                     ^
      186 |   const answers = adminQuizInfo(token, quizId).questions[0].answers;
      187 |   const answerIds = answers.filter((a) => a.answer === "Prince Charles");
      188 |   const res = playerQuestionAnswer(playerId, 1, answerIds);

      at Object.<anonymous> (httpTests/player/playerQuestionAnswer.test.ts:185:53)

FAIL httpTests/adminQuizSession/adminQuizSessionResults.test.ts
  ● Successful final results for whole session - admin with one player

    TypeError: Cannot read properties of undefined (reading 'answers')

      80 |     continue;
      81 |   }
    > 82 |   const getAnswers = adminQuizInfo(token, quizId).questions[0].answers;
         |                                                               ^
      83 |   const answers = getAnswers.filter((a) => a.answer === "Prince Charles");
      84 |   const answerIds = answers.map((a) => a.answerId);
      85 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual('QUESTION_OPEN')

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:82:63)

  ● Successful final results for whole session - admin with 2 players

    TypeError: Cannot read properties of undefined (reading 'answers')

      152 |     continue;
      153 |   }
    > 154 |   const getAnswers = adminQuizInfo(token, quizId).questions[0].answers;
          |                                                               ^
      155 |   const answers = getAnswers.filter((a) => a.answer === "Prince Charles");
      156 |   const answerIds = answers.map((a) => a.answerId);
      157 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual('QUESTION_OPEN')

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionResults.test.ts:154:63)

FAIL httpTests/adminQuizSession/adminQuizSessionStart.test.ts
  ● Test successful session start, quiz with questions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      51 | iter3test('Test successful session start, quiz with questions', () => {
      52 |   const sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 53 |   expect(sessionId).toStrictEqual(expect.any(Number));
         |                     ^
      54 |   const status = adminQuizSessionStatus(token, quizId, sessionId);
      55 |   expect(status.state).toBe("LOBBY");
      56 |   expect(status.metadata.questions[0].questionId).toBe(questionId1);

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:53:21)

  ● Test successful session start, same quiz twice, different sessions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      61 |   const sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
      62 |   const sessionId2 = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 63 |   expect(sessionId).toStrictEqual(expect.any(Number));
         |                     ^
      64 |   expect(sessionId2).toStrictEqual(expect.any(Number));
      65 |   expect(sessionId).not.toBe(sessionId2);
      66 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:63:21)

  ● Test successful session start, two different quizzes, different sessions

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      71 |   const sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
      72 |   const sessionId2 = adminQuizSessionStart(token, quizId2, autoStartNum).sessionId;
    > 73 |   expect(sessionId).toStrictEqual(expect.any(Number));
         |                     ^
      74 |   expect(sessionId2).toStrictEqual(expect.any(Number));
      75 |   expect(sessionId).not.toBe(sessionId2);
      76 |   expect(getSessionState(token, quizId, sessionId)).toBe("LOBBY");

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:73:21)

  ● Test quizId invalid error, cannot start session

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {"description": "Second quiz description", "duration": 0, "name": "Second quiz", "numQuestions": 0, "questions": [], "quizId": 2, "timeCreated": 1691821206, "timeLastEdited": 1691821206}

      80 | iter3test('Test quizId invalid error, cannot start session', () => {
      81 |   const quiz = adminQuizInfo(token, quizId+1);
    > 82 |   expect(quiz).toStrictEqual(400);
         |                ^
      83 | });
      84 |
      85 | iter3test('Test unauthorised quiz to start session', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:82:16)

  ● Test successful session progress to question after autostart time ends

    expect(received).toStrictEqual(expected) // deep equality

    Expected: "QUESTION_COUNTDOWN"
    Received: undefined

      100 |   playerJoin(sessionId, 'Yuchao');
      101 |   playerJoin(sessionId, 'Giuliana');
    > 102 |   expect(getSessionState(token, quizId, sessionId)).toStrictEqual("QUESTION_COUNTDOWN");
          |                                                     ^
      103 | });
      104 |
      105 | /* iter3test('Test invalid token structure, quiz to read', () => {

      at Object.<anonymous> (httpTests/adminQuizSession/adminQuizSessionStart.test.ts:102:53)

FAIL httpTests/adminQuiz/adminQuizQuestionMove.test.ts
  ● Successful quiz question move

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      72 |   adminQuizQuestionDuplicate(token, quizId, questionId);
      73 |   const res = adminQuizQuestionMove(token, quizId, questionId, newPosition);
    > 74 |   expect(res).toStrictEqual({});
         |               ^
      75 |   const quizInfo = adminQuizInfo(token, quizId);
      76 |   expect(quizInfo.questions[newPosition].questionId).toEqual(questionId);
      77 |   expect(quizInfo.questions[newPosition].question).toEqual(question.question);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionMove.test.ts:74:15)

FAIL httpTests/player/playerStatus.test.ts
  ● Successful status - LOBBY

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - QUESTION_COUNTDOWN

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - QUESTION_OPEN

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - QUESTION_CLOSE

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - ANSWER_SHOW

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - FINAL_RESULTS

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Successful status - END

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

  ● Unsuccessful player status - playerId does not exist

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      48 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      49 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 50 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      51 |   playerId = playerJoin(sessionId, NAME).playerId;
      52 | });
      53 |

      at Object.<anonymous> (httpTests/player/playerStatus.test.ts:50:71)

FAIL httpTests/player/playerResults.test.ts
  ● Successful final results for whole session - player 1

    TypeError: answers is not iterable

      83 |   }
      84 |   const answers = playerQuestionData(playerId, 1).answers;
    > 85 |   for (const answer of answers) {
         |                        ^
      86 |     if (answer.answer === "Prince Charles") {
      87 |       answerIds.push(answer.answerId);
      88 |     }

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:85:24)

  ● Successful final results for whole session - player 2

    TypeError: answers is not iterable

      161 |   }
      162 |   const answers = playerQuestionData(playerId, 1).answers;
    > 163 |   for (const answer of answers) {
          |                        ^
      164 |     if (answer.answer === "Prince Charles") {
      165 |       answerIds.push(answer.answerId);
      166 |     }

      at Object.<anonymous> (httpTests/player/playerResults.test.ts:163:24)

FAIL httpTests/player/playerPostChat.test.ts
  ● Successful for one message, same player - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      57 |   // TODO get unix timestamp
      58 |   const timestamp = Math.round(Date.now() / 1000);
    > 59 |   expect(res).toStrictEqual({});
         |               ^
      60 |   const message = playerGetChat(playerId);
      61 |   expect(message.messages[0]).toStrictEqual({
      62 |     messageBody,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:59:15)

  ● Successful for multiple messages, same player, same body - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      72 |   const msg2 = playerPostChat(playerId, messageBody);
      73 |   const timestamp = Math.round(Date.now() / 1000);
    > 74 |   expect(msg1).toStrictEqual({});
         |                ^
      75 |   expect(msg2).toStrictEqual({});
      76 |   const message = playerGetChat(playerId);
      77 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:74:16)

  ● Successful for multiple messages, different players - chat post

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

       96 |   const msg2 = playerPostChat(playerId2, messageBody);
       97 |   const timestamp = Math.round(Date.now() / 1000);
    >  98 |   expect(msg1).toStrictEqual({});
          |                ^
       99 |   expect(msg2).toStrictEqual({});
      100 |   const message = playerGetChat(playerId);
      101 |   expect(message.messages[0]).toStrictEqual({

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:98:16)

  ● Invalid messageBody after a valid one - chat post

    TypeError: Cannot read properties of undefined (reading 'length')

      135 |   expect(res).toBe(400);
      136 |   const message = playerGetChat(playerId);
    > 137 |   expect(message.messages.length).toBe(1);
          |                           ^
      138 |   expect(message.messages[0]).toStrictEqual({
      139 |     messageBody,
      140 |     playerId,

      at Object.<anonymous> (httpTests/player/playerPostChat.test.ts:137:27)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - all details are correctly stored and retrieved by quiz info

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      291 | iter3test('Test successful question add - all details are correctly stored and retrieved by quiz info', () => {
      292 |   const questionId = adminQuizQuestionAdd(token, quizId, { question, duration, points, answers, thumbnailUrl } ).questionId;
    > 293 |   expect(questionId).toStrictEqual(expect.any(Number));
          |                      ^
      294 |   const quiz = adminQuizInfo(token, quizId);
      295 |   expect(quiz.questions.length).toEqual(1);
      296 |   expect(quiz.questions[0].questionId).toEqual(questionId);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:293:22)

  ● Test successful question add - multiple correct

    expect(received).toStrictEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      329 |     }
      330 |   ], thumbnailUrl} ).questionId;
    > 331 |   expect(questionId).toStrictEqual(expect.any(Number));
          |                      ^
      332 |   const quiz = adminQuizInfo(token, quizId);
      333 |   for (let answer of quiz.questions[0].answers) {
      334 |     expect(colours).toContain(answer.colour);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:331:22)

  ● Test unsuccessful question add - question duration too long with another questin

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 500

      442 |   adminQuizQuestionAdd(token, quizId, { question, duration: 100, points, answers, thumbnailUrl } );
      443 |   const res = adminQuizQuestionAdd(token, quizId, { question, duration: 81, points, answers } );
    > 444 |   expect(res).toStrictEqual(400);
          |               ^
      445 | });
      446 |
      447 | iter3test('Test unsuccessful question add - question answer less than 1', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:444:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
  ● Successful quiz question delete

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 400

      68 | test('Successful quiz question delete', () => {
      69 |   const res = adminQuizQuestionDelete(token, quizId, questionId);
    > 70 |   expect(res).toStrictEqual({});
         |               ^
      71 |   const questions = adminQuizInfo(token, quizId).questions;
      72 |   expect(questions).not.toContain(question)
      73 |

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDelete.test.ts:70:15)

FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"newQuestionId": Any<Number>}
    Received: 400

      70 | test('Successful quiz question duplicate', () => {
      71 |   const res = adminQuizQuestionDuplicate(token, quizId, questionId);
    > 72 |   expect(res).toStrictEqual({ newQuestionId: expect.any(Number)} );
         |               ^
      73 |   const quiz = adminQuizInfo(token, quizId);
      74 |   expect(quiz.questions.length).toEqual(2);
      75 |   expect(quiz.questions[1].questionId).not.toEqual(questionId);

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:72:15)

FAIL httpTests/player/playerJoin.test.ts
  ● Successful player join

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

  ● Successful second player join

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

  ● Unsuccessful player join - session not in LOBBY state

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

  ● Unsuccessful second player join - name is not unique

    TypeError: Cannot read properties of undefined (reading 'timeLastEdited')

      47 |   questionId1 = adminQuizQuestionAdd(token, quizId, question1).questionId;
      48 |   sessionId = adminQuizSessionStart(token, quizId, autoStartNum).sessionId;
    > 49 |   editTime = adminQuizSessionStatus(token, quizId, sessionId).metadata.timeLastEdited;
         |                                                                       ^
      50 | });
      51 |
      52 | iter3test('Successful player join', () => {

      at Object.<anonymous> (httpTests/player/playerJoin.test.ts:49:71)

FAIL httpTests/player/playerGetChat.test.ts
  ● Successful get chat - conversation fetched by player 2

    TypeError: Cannot read properties of undefined (reading '0')

      61 |   const timestamp = Math.round(Date.now() / 1000);
      62 |   const message = playerGetChat(playerId2);
    > 63 |   expect(message.messages[0]).toStrictEqual({
         |                          ^
      64 |     messageBody,
      65 |     playerId: playerId1,
      66 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:63:26)

  ● Messages from other sessions player isnt in arent returned - chat get for playerId1

    TypeError: Cannot read properties of undefined (reading '0')

      83 |   const timestamp = Math.round(Date.now() / 1000);
      84 |   const message = playerGetChat(playerId1);
    > 85 |   expect(message.messages[0]).toStrictEqual({
         |                          ^
      86 |     messageBody,
      87 |     playerId: playerId1,
      88 |     playerName: playerName1,

      at Object.<anonymous> (httpTests/player/playerGetChat.test.ts:85:26)

FAIL httpTests/adminAuth/adminAuthLogout.test.ts
  ● token is for a user who has already logged out

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      30 |   adminAuthLogout(token);
      31 |   const res = adminAuthLogout(token);
    > 32 |   expect(res).toStrictEqual(400);
         |               ^
      33 | });
      34 |
      35 | test('Cant perform action after logout', () => {

      at Object.<anonymous> (httpTests/adminAuth/adminAuthLogout.test.ts:32:15)


Test Suites: 18 failed, 17 passed, 35 total
Tests:       92 failed, 41 skipped, 178 passed, 311 total
Snapshots:   0 total
Time:        18.463 s, estimated 24 s
Ran all test suites matching /httpTests\//i.
npm notice 
npm notice New minor version of npm available! 9.5.1 -> 9.8.1
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.8.1>
npm notice Run `npm install -g npm@9.8.1` to update!
npm notice 
