
> test
> jest httpTests/

FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts (5.891 s)
  ● Test successful question edit

    expect(received).toContain(expected) // indexOf

    Expected value: "pink"
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      72 |   expect(quiz.questions[0].points).toEqual(points);
      73 |   for (let answer of quiz.questions[0].answers) {
    > 74 |     expect(colours).toContain(answer.colour);
         |                     ^
      75 |     expect(answer.answerId).toEqual(expect.any(Number));
      76 |     expect(answerNames).toContain(answer.answer);
      77 |     if (answer.answer === "Queen Elizabeth") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:74:21)

  ● Test unsuccessful question edit - question duration too long with another questin

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      223 |   adminQuizQuestionEdit(token, quizId, questionId, { question, duration: 100, points, answers } );
      224 |   const res = adminQuizQuestionEdit(token, quizId, questionId, { question, duration: 81, points, answers } );
    > 225 |   expect(res).toStrictEqual(400);
          |               ^
      226 | });
      227 |
      228 | test('Test unsuccessful question edit - question answer less than 1', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:225:15)

PASS httpTests/adminUser/adminUserDetailsPut.test.ts
PASS httpTests/adminQuiz/adminQuizTrashEmpty.test.ts
PASS httpTests/adminQuiz/adminQuizRestore.test.ts
PASS httpTests/adminAuth/adminAuthLogout.test.ts
FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: "pink"
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      79 |   const quiz = adminQuizInfo(token, quizId);
      80 |   for (let answer of quiz.questions[0].answers) {
    > 81 |     expect(colours).toContain(answer.colour);
         |                     ^
      82 |     expect(answer.answerId).toEqual(expect.any(Number));
      83 |     expect(answerNames).toContain(answer.answer);
      84 |     if (answer.answer === "Prince Charles" || answer.answer === "Prince George") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:81:21)

PASS httpTests/adminQuiz/adminQuizQuestionMove.test.ts
PASS httpTests/adminQuiz/adminQuizNameUpdate.test.ts
PASS httpTests/adminQuiz/adminQuizDescriptionUpdate.test.ts
PASS httpTests/adminAuth/adminAuthRegister.test.ts
PASS httpTests/adminQuiz/adminQuizQuestionDelete.test.ts
PASS httpTests/adminQuiz/adminQuizTransfer.test.ts
FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toContain(expected) // indexOf

    Expected value: "pink"
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      50 |   expect(quiz.questions[1].points).toEqual(question.points);
      51 |   for (let answer of quiz.questions[0].answers) {
    > 52 |     expect(colours).toContain(answer.colour);
         |                     ^
      53 |     expect(answer.answerId).toEqual(expect.any(Number));
      54 |     expect(answerNames).toContain(answer.answer);
      55 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:52:21)

PASS httpTests/adminQuiz/adminQuizInfo.test.ts
PASS httpTests/adminQuiz/adminQuizNew.test.ts
PASS httpTests/adminQuiz/adminQuizTrash.test.ts
PASS httpTests/adminUser/adminUserPassword.test.ts
PASS httpTests/adminQuiz/adminQuizList.test.ts
PASS httpTests/adminQuiz/adminQuizDelete.test.ts
PASS httpTests/adminUser/adminUserDetails.test.ts
PASS httpTests/adminAuth/adminAuthLogin.test.ts
PASS httpTests/other/clear.test.ts

Summary of all failing tests
FAIL httpTests/adminQuiz/adminQuizQUestionEdit.test.ts (5.891 s)
  ● Test successful question edit

    expect(received).toContain(expected) // indexOf

    Expected value: "pink"
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      72 |   expect(quiz.questions[0].points).toEqual(points);
      73 |   for (let answer of quiz.questions[0].answers) {
    > 74 |     expect(colours).toContain(answer.colour);
         |                     ^
      75 |     expect(answer.answerId).toEqual(expect.any(Number));
      76 |     expect(answerNames).toContain(answer.answer);
      77 |     if (answer.answer === "Queen Elizabeth") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:74:21)

  ● Test unsuccessful question edit - question duration too long with another questin

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: {}

      223 |   adminQuizQuestionEdit(token, quizId, questionId, { question, duration: 100, points, answers } );
      224 |   const res = adminQuizQuestionEdit(token, quizId, questionId, { question, duration: 81, points, answers } );
    > 225 |   expect(res).toStrictEqual(400);
          |               ^
      226 | });
      227 |
      228 | test('Test unsuccessful question edit - question answer less than 1', () => {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQUestionEdit.test.ts:225:15)

FAIL httpTests/adminQuiz/adminQuizQuestionAdd.test.ts
  ● Test successful question add - multiple correct

    expect(received).toContain(expected) // indexOf

    Expected value: "pink"
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      79 |   const quiz = adminQuizInfo(token, quizId);
      80 |   for (let answer of quiz.questions[0].answers) {
    > 81 |     expect(colours).toContain(answer.colour);
         |                     ^
      82 |     expect(answer.answerId).toEqual(expect.any(Number));
      83 |     expect(answerNames).toContain(answer.answer);
      84 |     if (answer.answer === "Prince Charles" || answer.answer === "Prince George") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionAdd.test.ts:81:21)

FAIL httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts
  ● Successful quiz question duplicate

    expect(received).toContain(expected) // indexOf

    Expected value: "pink"
    Received array: ["red", "blue", "yellow", "green", "brown", "purple", "orange"]

      50 |   expect(quiz.questions[1].points).toEqual(question.points);
      51 |   for (let answer of quiz.questions[0].answers) {
    > 52 |     expect(colours).toContain(answer.colour);
         |                     ^
      53 |     expect(answer.answerId).toEqual(expect.any(Number));
      54 |     expect(answerNames).toContain(answer.answer);
      55 |     if (answer.answer === "Prince Charles") {

      at Object.<anonymous> (httpTests/adminQuiz/adminQuizQuestionDuplicate.test.ts:52:21)


Test Suites: 3 failed, 19 passed, 22 total
Tests:       4 failed, 155 passed, 159 total
Snapshots:   0 total
Time:        37.732 s, estimated 40 s
Ran all test suites matching /httpTests\//i.
npm notice 
npm notice New minor version of npm available! 9.5.1 -> 9.8.0
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.8.0>
npm notice Run `npm install -g npm@9.8.0` to update!
npm notice 
